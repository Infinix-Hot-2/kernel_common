{
  "comments": [
    {
      "key": {
        "uuid": "038e8eef_20da0a9f",
        "filename": "security/selinux/avc.c",
        "patchSetId": 16
      },
      "lineNbr": 408,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-03-26T13:01:14Z",
      "side": 1,
      "message": "Should be !avc_operation_has_perm(), same as for auditallow.\nauditdeny is the set of permissions that should be audited when denied, the complement of any dontaudit rules.",
      "revId": "c5e954dea32d374e00859dad2e764aff7c346543",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "038e8eef_c0355e57",
        "filename": "security/selinux/hooks.c",
        "patchSetId": 16
      },
      "lineNbr": 3112,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-03-26T13:01:14Z",
      "side": 1,
      "message": "typo: permission",
      "revId": "c5e954dea32d374e00859dad2e764aff7c346543",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2339d2d0_ebaccd1a",
        "filename": "security/selinux/hooks.c",
        "patchSetId": 16
      },
      "lineNbr": 3113,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-03-26T13:01:14Z",
      "side": 1,
      "message": "missing word: to",
      "revId": "c5e954dea32d374e00859dad2e764aff7c346543",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4336c6df_ecb067d1",
        "filename": "security/selinux/ss/conditional.c",
        "patchSetId": 16
      },
      "lineNbr": 633,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-03-26T13:01:14Z",
      "side": 1,
      "message": "We want to call it for any AVTAB_OP value, right?  And in fact, we don\u0027t need this test at all since the key already specifies AVTAB_OP specifier only.  Should only need to test for ENABLED here.",
      "revId": "c5e954dea32d374e00859dad2e764aff7c346543",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "038e8eef_e0c3c2b5",
        "filename": "security/selinux/ss/services.c",
        "patchSetId": 16
      },
      "lineNbr": 629,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-03-26T13:01:14Z",
      "side": 1,
      "message": "Or if allowing one or more complete types.",
      "revId": "c5e954dea32d374e00859dad2e764aff7c346543",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2339d2d0_cb9229d3",
        "filename": "security/selinux/ss/services.c",
        "patchSetId": 16
      },
      "lineNbr": 632,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-03-26T13:01:14Z",
      "side": 1,
      "message": "Normally I would put this comment within the else { } below.",
      "revId": "c5e954dea32d374e00859dad2e764aff7c346543",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "038e8eef_00c106ad",
        "filename": "security/selinux/ss/services.c",
        "patchSetId": 16
      },
      "lineNbr": 941,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-03-26T13:01:14Z",
      "side": 1,
      "message": "else if... since they are mutually exclusive?",
      "revId": "c5e954dea32d374e00859dad2e764aff7c346543",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2339d2d0_ab8fe5a6",
        "filename": "security/selinux/ss/services.c",
        "patchSetId": 16
      },
      "lineNbr": 944,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-03-26T13:01:14Z",
      "side": 1,
      "message": "else return or BUG.",
      "revId": "c5e954dea32d374e00859dad2e764aff7c346543",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2370f2c2_39cfaf5d",
        "filename": "security/selinux/ss/services.c",
        "patchSetId": 16
      },
      "lineNbr": 966,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-03-26T17:49:27Z",
      "side": 1,
      "message": "For auditdeny, you want different behavior - \u0026\u003d instead of |\u003d as in compute_av.  You are clearing bits not set in the entry in order to suppress denials silenced via dontaudit rules.",
      "revId": "c5e954dea32d374e00859dad2e764aff7c346543",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d246e8_bb12bb08",
        "filename": "security/selinux/ss/services.c",
        "patchSetId": 16
      },
      "lineNbr": 966,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2015-03-26T21:35:35Z",
      "side": 1,
      "message": "I account for this in the avc_operation_audit_required code.\n\nI considered doing it the other way (following precedence in the av_decision) but decided against it primarily for simplicity. Unlike AV permissions, only one ioctl command permission will be requested at a time, whether that bit is set or unset for auditdeny doesn\u0027t particularly matter because the auditdeny operation permission is not used directly to modify the av_decision (i.e. they are not bitwise \u0026 or | together), the permission is checked, and based on that decision audited may be modified.\n\naudited \u003d denied \u0026 avd-\u003eauditdeny;\nif (audited \u0026\u0026 od \u0026\u0026 avc_operation_has_perm(od-\u003eauditdeny, cmd))\n\taudited \u0026\u003d ~requested;\n\nLeaving the operation_decision-\u003eauditdeny structure the same as the others simplifies code here and in the policy compiler.",
      "parentUuid": "2370f2c2_39cfaf5d",
      "revId": "c5e954dea32d374e00859dad2e764aff7c346543",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43308612_c22e628a",
        "filename": "security/selinux/ss/services.c",
        "patchSetId": 16
      },
      "lineNbr": 966,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-03-27T12:14:50Z",
      "side": 1,
      "message": "In that case, please rename auditdeny to dontaudit or something to make it clear that you are using it in the reverse sense of the avd auditdeny vector.  As a historical note, originally the policy rules were auditdeny rules, but because the default was to audit all denials, people would write them using permission set complements, e.g.\nauditdeny a b:c ~{ read write };  This became ambiguous when we allowed multiple allow rules to affect the same (domain, type, class) triple, e.g. if I have auditdeny a b:c ~{ read write }; and auditdeny a b:c ~ioctl;.  So then we introduced dontaudit rules in the policy to make it clear that you are disabling auditing of denials, but complement them internally and keep the internal representation as auditdeny vectors.  You seem to be using your auditdeny vectors in the same way as dontaudit rules, so just call them that.  The language still supports use of auditdeny rules but I don\u0027t think anyone is using them anymore; they all migrated to dontaudit.",
      "parentUuid": "43d246e8_bb12bb08",
      "revId": "c5e954dea32d374e00859dad2e764aff7c346543",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2370f2c2_391a4f6e",
        "filename": "security/selinux/ss/services.c",
        "patchSetId": 16
      },
      "lineNbr": 987,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-03-26T17:49:27Z",
      "side": 1,
      "message": "auditdeny should be initialized to all-bits-set, i.e. audit all denials by default.",
      "revId": "c5e954dea32d374e00859dad2e764aff7c346543",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}