{
  "comments": [
    {
      "key": {
        "uuid": "65810917_275afac6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-02-24T19:08:39Z",
      "side": 1,
      "message": "Do you have a stack trace from a crash to put in the commit message?",
      "revId": "fc9b2dc4702cbe012e0cbdd4f8a54b9ab3828a81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05704d17_e7b1bc07",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1067053
      },
      "writtenOn": "2015-02-25T08:42:32Z",
      "side": 1,
      "message": "Here is the call-stack showing the crash:-\n 10087.163491:   \u003c6\u003e Unable to handle kernel paging request at virtual address 6b6b6b6b\n 10087.170686:   \u003c6\u003e pgd \u003d ea94c000\n 10087.173371:   \u003c2\u003e [6b6b6b6b] *pgd\u003d00000000\n 10087.176940:   \u003c6\u003e Internal error: Oops: 5 [#1] PREEMPT SMP ARM\n 10087.182228:   \u003c2\u003e Modules linked in: radio_iris_transport [last unloaded: wlan]\n 10087.189005:   \u003c6\u003e CPU: 2 PID: 20325 Comm: sh Tainted: G        W  O 3.10.28-g11f94e7-00012-g3135a8a #1\n 10087.197780:   \u003c6\u003e task: e4263c00 ti: c35c4000 task.ti: c35c4000\n 10087.203160:   \u003c2\u003e PC is at __list_add+0x34/0xcc\n 10087.207145:   \u003c2\u003e LR is at __mutex_lock_slowpath+0x17c/0x410\n 10087.212265:   \u003c2\u003e pc : [\u003cc03430cc\u003e]    lr : [\u003cc09a533c\u003e]    psr: 60070093\nsp : c35c5ea8  ip : c35c5ed8  fp : d22357c0\n 10087.223725:   \u003c2\u003e r10: dc80b450  r9 : c35c5f80  r8 : e4263c00\n 10087.228931:   \u003c2\u003e r7 : 00000001  r6 : c35c5ec8  r5 : dc80b450  r4 : 6b6b6b6b\n 10087.235445:   \u003c2\u003e r3 : 6b6b6b6b  r2 : dc80b450  r1 : 6b6b6b6b  r0 : c35c5ec8\n 10087.241961:   \u003c2\u003e Flags: nZCv  IRQs off  FIQs on  Mode SVC_32  ISA ARM  Segment user\n 10087.249159:   \u003c2\u003e Control: 10c5383d  Table: aa94c06a  DAC: 00000015\n ...\n 10088.194658:   \u003c2\u003e [\u003cc03430cc\u003e] (__list_add+0x34/0xcc) from [\u003cc09a533c\u003e] (__mutex_lock_slowpath+0x17c/0x410)\n 10088.203854:   \u003c2\u003e [\u003cc09a533c\u003e] (__mutex_lock_slowpath+0x17c/0x410) from [\u003cc09a55f0\u003e] (mutex_lock+0x20/0x3c)\n 10088.213055:   \u003c2\u003e [\u003cc09a55f0\u003e] (mutex_lock+0x20/0x3c) from [\u003cc06ddbc0\u003e] (ion_debug_client_show+0x38/0xb4)\n 10088.222086:   \u003c2\u003e [\u003cc06ddbc0\u003e] (ion_debug_client_show+0x38/0xb4) from [\u003cc02113b4\u003e] (seq_read+0x1d4/0x458)\n 10088.231108:   \u003c2\u003e [\u003cc02113b4\u003e] (seq_read+0x1d4/0x458) from [\u003cc01f4ce0\u003e] (vfs_read+0xa4/0x12c)\n 10088.239099:   \u003c2\u003e [\u003cc01f4ce0\u003e] (vfs_read+0xa4/0x12c) from [\u003cc01f4e88\u003e] (SyS_read+0x38/0x64)\n 10088.246915:   \u003c2\u003e [\u003cc01f4e88\u003e] (SyS_read+0x38/0x64) from [\u003cc0106160\u003e] (ret_fast_syscall+0x0/0x30)\n 10088.255242:   \u003c6\u003e Code: e59f0090 e1a03004 e59f208c ebf7602a (e5943000)",
      "parentUuid": "65810917_275afac6",
      "revId": "fc9b2dc4702cbe012e0cbdd4f8a54b9ab3828a81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65810917_a74c2a09",
        "filename": "drivers/staging/android/ion/ion.c",
        "patchSetId": 1
      },
      "lineNbr": 683,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-02-24T19:08:39Z",
      "side": 1,
      "message": "I believe rbtrees may get reordered during add or delete, so you can\u0027t assume that an entry will stay at the same offset across multiple calls to ion_client_seq_start.",
      "revId": "fc9b2dc4702cbe012e0cbdd4f8a54b9ab3828a81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65bca932_4f9fad40",
        "filename": "drivers/staging/android/ion/ion.c",
        "patchSetId": 1
      },
      "lineNbr": 683,
      "author": {
        "id": 1067053
      },
      "writtenOn": "2015-02-25T08:42:32Z",
      "side": 1,
      "message": "Our intention was to show all the clients information as much as possible. If we are writing into seq_buf continuously in ion_client_seq_show() with single call some of the ion_clients debug data wont appear because initial seq_buf size will be limited to a PAGE_SIZE. \n\nWith this approach we can show as many ion clients debug information as much possible.  If I follow other approach such as taking lock once and printing every ion_client information in ion_client_seq_show at single attempt, we may not see all the clients information, if seq_buf is overflow.",
      "parentUuid": "65810917_a74c2a09",
      "revId": "fc9b2dc4702cbe012e0cbdd4f8a54b9ab3828a81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4576c513_069dfad6",
        "filename": "drivers/staging/android/ion/ion.c",
        "patchSetId": 1
      },
      "lineNbr": 897,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-02-24T19:08:39Z",
      "side": 1,
      "message": "Why move the lock after the kfree?  If you\u0027re about to free the memory nobody better have a reference to it, so the lock is unnecessary.",
      "revId": "fc9b2dc4702cbe012e0cbdd4f8a54b9ab3828a81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65bca932_afac5989",
        "filename": "drivers/staging/android/ion/ion.c",
        "patchSetId": 1
      },
      "lineNbr": 897,
      "author": {
        "id": 1067053
      },
      "writtenOn": "2015-02-25T08:42:32Z",
      "side": 1,
      "message": "I would like to maintain synchronization between ion_client_destory() and ion_client_debug_show().\n\nion_client data pointer is still with inode-\u003ei_private data, which allows seq_read to proceed further and access the memory which is already freed by the ion_client_destroy(). \n\ndebugfs_remove_recursively is not atomic and after freeing ion_client also, inode-\u003ei_private data still referencing to freed ion_client and which leads to system crash will reading/dereferencing the ion client members.",
      "parentUuid": "4576c513_069dfad6",
      "revId": "fc9b2dc4702cbe012e0cbdd4f8a54b9ab3828a81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c582b518_4a1a93e6",
        "filename": "drivers/staging/android/ion/ion.c",
        "patchSetId": 1
      },
      "lineNbr": 1637,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-02-24T19:08:39Z",
      "side": 1,
      "message": "This changes the output from a file per client to a single file, which is a pretty drastic change to make, and doesn\u0027t seem necessary.",
      "revId": "fc9b2dc4702cbe012e0cbdd4f8a54b9ab3828a81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a59ce184_c712b254",
        "filename": "drivers/staging/android/ion/ion.c",
        "patchSetId": 1
      },
      "lineNbr": 1637,
      "author": {
        "id": 1067053
      },
      "writtenOn": "2015-02-25T08:42:32Z",
      "side": 1,
      "message": "hi colin, \n\nhave tried couple of options and none of them are working to synchronize between the ion_client_destory and ion_client_debug_show(). Because clients can be created and destroyed dynamically on one core and ion_client_debug_show() can execute on other core, leading to system crash as it is accessing the freed memory.",
      "parentUuid": "c582b518_4a1a93e6",
      "revId": "fc9b2dc4702cbe012e0cbdd4f8a54b9ab3828a81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}