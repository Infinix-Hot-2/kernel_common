{
  "comments": [
    {
      "key": {
        "uuid": "17515fa8_3003b0b2",
        "filename": "security/selinux/avc.c",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2015-02-03T05:20:52Z",
      "side": 1,
      "message": "goto out_unlock ? Since the lock is acquired on line 592.",
      "range": {
        "startLine": 619,
        "startChar": 8,
        "endLine": 619,
        "endChar": 11
      },
      "revId": "e37fe6d46ac6a232d636479cc5a0aa7466a4f699",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f74dab10_6fcb9924",
        "filename": "security/selinux/avc.c",
        "patchSetId": 2
      },
      "lineNbr": 769,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2015-02-03T05:20:52Z",
      "side": 1,
      "message": "move block to line 777, after grabbing lock, and after BUG_ON line 774.",
      "revId": "e37fe6d46ac6a232d636479cc5a0aa7466a4f699",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97854f8c_342368a8",
        "filename": "security/selinux/avc.c",
        "patchSetId": 2
      },
      "lineNbr": 769,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2015-02-03T17:52:20Z",
      "side": 1,
      "message": "These are all stack variables. Modifying them outside the lock is intentional.",
      "parentUuid": "f74dab10_6fcb9924",
      "revId": "e37fe6d46ac6a232d636479cc5a0aa7466a4f699",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f74dab10_0fe3f5aa",
        "filename": "security/selinux/hooks.c",
        "patchSetId": 2
      },
      "lineNbr": 1598,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2015-02-03T05:20:52Z",
      "side": 1,
      "message": "avoid unnecessary whitespace changes",
      "revId": "e37fe6d46ac6a232d636479cc5a0aa7466a4f699",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "378ca3b9_40411078",
        "filename": "security/selinux/hooks.c",
        "patchSetId": 2
      },
      "lineNbr": 3128,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2015-02-03T05:20:52Z",
      "side": 1,
      "message": "should be size_t",
      "revId": "e37fe6d46ac6a232d636479cc5a0aa7466a4f699",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17515fa8_50175ce5",
        "filename": "security/selinux/hooks.c",
        "patchSetId": 2
      },
      "lineNbr": 3138,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2015-02-03T05:20:52Z",
      "side": 1,
      "message": "instead of having avd.avo be a pointer, can you put the entire struct into avd? At first glance, this feels odd...",
      "revId": "e37fe6d46ac6a232d636479cc5a0aa7466a4f699",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97854f8c_946ef462",
        "filename": "security/selinux/hooks.c",
        "patchSetId": 2
      },
      "lineNbr": 3138,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2015-02-03T17:52:20Z",
      "side": 1,
      "message": "This is done because avo is fairly large (currently 33 bytes) and uncommon, while avd is used for every type enforcement decision. Looking at the hash_stats in sysfs, there are currently  511 entries. So saving at most (511*29 saved bytes) 15k hardly seems worth all the extra steps I am having to take. We also need to consider desktops though, perhaps 150k would be worth it?",
      "parentUuid": "17515fa8_50175ce5",
      "revId": "e37fe6d46ac6a232d636479cc5a0aa7466a4f699",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f74dab10_6ff2b976",
        "filename": "security/selinux/ss/avtab.h",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2015-02-03T05:20:52Z",
      "side": 1,
      "message": "ya, it feels like if you declare this to be:\n\n  struct avtab_operations ops;\n\ninstead of using a pointer, you don\u0027t have to worry about all the funky null assignments.\n\nbut maybe I don\u0027t understand this code enough yet...",
      "revId": "e37fe6d46ac6a232d636479cc5a0aa7466a4f699",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5778376f_d96c37f3",
        "filename": "security/selinux/ss/avtab.h",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1026058
      },
      "writtenOn": "2015-02-03T16:41:08Z",
      "side": 1,
      "message": "Jeff may correct me, but I believe this is being done to conserve space in the cache.  There is an avtab_datum stored for every access vector (ssid, tsid, class), which currently just occupies one u32, but will effectively double/triple in size with just the pointer, and will grow larger if mapping an avtab_operations struct, which should presumably be needed in only a relatively small number of cache entries (the ones corresponding to rules with augmented ioctls).\n\nI\u0027ll be able to review more when in the office, though...",
      "parentUuid": "f74dab10_6ff2b976",
      "revId": "e37fe6d46ac6a232d636479cc5a0aa7466a4f699",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f74dab10_4adfab86",
        "filename": "security/selinux/ss/avtab.h",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2015-02-03T17:52:20Z",
      "side": 1,
      "message": "exactly. The avtab structure is currently storing 4-5k worth of avtab_nodes. 29 bytes of saved storage per avtab_node ~150k in memory. It would be interesting to know the savings on a desktop. We have been throwing around the 10x number for policy size.",
      "parentUuid": "5778376f_d96c37f3",
      "revId": "e37fe6d46ac6a232d636479cc5a0aa7466a4f699",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}