{
  "comments": [
    {
      "key": {
        "uuid": "72147288_0776b80b",
        "filename": "security/selinux/avc.c",
        "patchSetId": 8
      },
      "lineNbr": 274,
      "author": {
        "id": 1010099
      },
      "writtenOn": "2015-03-03T16:29:35Z",
      "side": 1,
      "message": "This assumes that dest was allocated with the same specified flags as src.  Is that a safe assumption?  Kernel with this patch crashes in this function on boot.",
      "revId": "1ef9c830b56263193d5553c95b0f0b0180c73780",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12e976fa_71e058c2",
        "filename": "security/selinux/avc.c",
        "patchSetId": 8
      },
      "lineNbr": 274,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2015-03-03T17:16:03Z",
      "side": 1,
      "message": "Hmm...the fix for this didn\u0027t end up in this commit. I\u0027ll upload now.",
      "parentUuid": "72147288_0776b80b",
      "revId": "1ef9c830b56263193d5553c95b0f0b0180c73780",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32c11a6d_7a013931",
        "filename": "security/selinux/avc.c",
        "patchSetId": 8
      },
      "lineNbr": 683,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-03-03T14:02:39Z",
      "side": 1,
      "message": "Why not check for this within this function and avoid the need to separately call avc_operation_in_range, as the only user does this anyway?",
      "revId": "1ef9c830b56263193d5553c95b0f0b0180c73780",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d20a7e5c_95c5a4b7",
        "filename": "security/selinux/ss/avtab.c",
        "patchSetId": 8
      },
      "lineNbr": 569,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-03-03T14:02:39Z",
      "side": 1,
      "message": "Need to update avtab_write_item to also write out the operations.  This is used to generate the policy file readable via /sys/fs/selinux/policy, used to obtain the currently loaded kernel policy for analysis/testing.  Should be essentially the same logic as used in the corresponding libsepol functions but just using the kernel types and conventions.",
      "revId": "1ef9c830b56263193d5553c95b0f0b0180c73780",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32d75a80_0a2f5b8b",
        "filename": "security/selinux/ss/avtab.c",
        "patchSetId": 8
      },
      "lineNbr": 569,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-03-04T14:43:22Z",
      "side": 1,
      "message": "Note that avtab_write/avtab_write_item in the kernel do not need to support policyvers \u003c POLICYDB_VERSION_AVTAB, as this is prohibited at the beginning of policydb_write().  This is because /sys/fs/selinux/policy support was added long after that version change and it wasn\u0027t viewed as worthwhile to bring in the legacy support from libsepol.  But you do need to support the before and after cases for your new policy version.",
      "parentUuid": "d20a7e5c_95c5a4b7",
      "revId": "1ef9c830b56263193d5553c95b0f0b0180c73780",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32c11a6d_fa5ae95c",
        "filename": "security/selinux/ss/services.c",
        "patchSetId": 8
      },
      "lineNbr": 622,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-03-03T14:02:39Z",
      "side": 1,
      "message": "So, we could end up denying an operation allowed by policy simply because we end up running out of space in the operation_range while merging multiple allow rules written on different attributes associated with the type, right?  And that truncation of the allowed operations would be silent?  Should we at least log if we bump up against the max operation range len during the merge for debugging purposes?  Is checkpolicy/libsepol doing anything to help detect/prevent this from happening?",
      "revId": "1ef9c830b56263193d5553c95b0f0b0180c73780",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72ce32a5_94f4e459",
        "filename": "security/selinux/ss/services.c",
        "patchSetId": 8
      },
      "lineNbr": 622,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2015-03-03T17:16:03Z",
      "side": 1,
      "message": "Yes, the plan is to add checks in the policy compiler to make sure this doesn\u0027t occur. I\u0027ll add the logging here too.",
      "parentUuid": "32c11a6d_fa5ae95c",
      "revId": "1ef9c830b56263193d5553c95b0f0b0180c73780",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}