{
  "comments": [
    {
      "key": {
        "uuid": "1b153384_fe85e1ed",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2015-11-24T01:09:13Z",
      "side": 1,
      "message": "Describe the bug. The bug number is useless outside Google.",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b2123e5_725ac532",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1026058
      },
      "writtenOn": "2015-11-24T01:30:37Z",
      "side": 1,
      "message": "Will provide more context w/next patch.",
      "parentUuid": "1b153384_fe85e1ed",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b167790_bfc087ff",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2414,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2015-11-24T01:43:13Z",
      "side": 1,
      "message": "why are you allocating this?",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b167790_da54714c",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2414,
      "author": {
        "id": 1026058
      },
      "writtenOn": "2015-11-24T18:05:14Z",
      "side": 1,
      "message": "for use in the below memcpy() and copy_to_user(), which needs to copy over aligned chunks.  I could instead copy over the original secctx and then add appropriate padding, but this seemed simpler.",
      "parentUuid": "3b167790_bfc087ff",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db271bf3_34c67dbf",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2414,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2015-11-24T22:31:31Z",
      "side": 1,
      "message": "why does memcpy and copy_to_user need aligned chunks?",
      "parentUuid": "3b167790_da54714c",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b2123e5_dd0d7dbe",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2414,
      "author": {
        "id": 1026058
      },
      "writtenOn": "2015-11-25T23:06:27Z",
      "side": 1,
      "message": "in Parcel.cpp, Parcel::read() pads all reads from the bwr.read_buffer with pad_size(), as does bio_alloc() and bio_get() in servicemanager/binder.c, although those latter two are for the br_transaction data rather than the bwr buffer.",
      "parentUuid": "db271bf3_34c67dbf",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b167790_62ecafea",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2414,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2015-11-25T23:35:17Z",
      "side": 1,
      "message": "That does not mean you need to copy an aligned chunk. You can copy the data you have, and then align the pointer (or fill the pad region).",
      "parentUuid": "9b2123e5_dd0d7dbe",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbc4277e_a2655f24",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2414,
      "author": {
        "id": 1026058
      },
      "writtenOn": "2015-11-26T00:50:38Z",
      "side": 1,
      "message": "Yes, that was the alternative I mentioned above (forgo the kzalloc and instead do copy_to_user() directly with secctx, followed by padding # of *ptr\u003d0 statements).  Just to be clear: the issue here is one of efficiency, right? Were we to do it this way, we\u0027d cut out a kzalloc and memcpy at the expense of only a couple of assignment and increment operations.  But in either case we need to update the ptr to account for the extra bytes that will be burned by userspace.",
      "parentUuid": "3b167790_62ecafea",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb2a67bd_a1922939",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2414,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2015-11-26T01:14:58Z",
      "side": 1,
      "message": "It is not just an efficiency issue. You also added new error return path here that is different from everything else in this function. The only direct return paths here is if user space passed a bad buffer pointer.",
      "parentUuid": "bbc4277e_a2655f24",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b167790_6bbbf532",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2447,
      "author": {
        "id": 1026058
      },
      "writtenOn": "2015-11-21T01:38:45Z",
      "side": 1,
      "message": "could send w/BR_REPLY too, but I don\u0027t have a use for that yet.",
      "range": {
        "startLine": 2447,
        "startChar": 6,
        "endLine": 2447,
        "endChar": 27
      },
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db271bf3_84461a34",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2451,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2015-11-24T01:48:00Z",
      "side": 1,
      "message": "why are you using a different copy_to_user function than everything else in this file?",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fbb05f0b_8f2ba55e",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2451,
      "author": {
        "id": 1026058
      },
      "writtenOn": "2015-11-24T18:05:14Z",
      "side": 1,
      "message": "Hasty port from device-specific kernel in which patch was tested, which used this form.",
      "parentUuid": "db271bf3_84461a34",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db271bf3_a42cfe6d",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2453,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2015-11-24T01:48:00Z",
      "side": 1,
      "message": "you may be writing past the end of the buffer here.",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b2123e5_a569993e",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2453,
      "author": {
        "id": 1026058
      },
      "writtenOn": "2015-11-24T18:05:14Z",
      "side": 1,
      "message": "Yes, looks like a slightly messy addition above to go along with \"if (end - ptr \u003c sizeof(tr) + 4)\" would be required.",
      "parentUuid": "db271bf3_a42cfe6d",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b153384_9e614d18",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2455,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2015-11-24T01:09:13Z",
      "side": 1,
      "message": "This is inconsistent with the rest of the protocol.",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db271bf3_e4139640",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2455,
      "author": {
        "id": 1026058
      },
      "writtenOn": "2015-11-24T01:30:37Z",
      "side": 1,
      "message": "Yes.  As described in the bug, I came up with two approaches.  The first would be to add a field to br_transaction_data and pass the u32 sid along with it, but this is an opaque value with meaning only to the kernel and so would also require opening up an API to query this value.  It seemed simpler and more straightforward to just pass the string along with the transaction. I\u0027d appreciate alternative suggestions if you have them, including perhaps a way to make this approach more palatable.",
      "parentUuid": "1b153384_9e614d18",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b1b2bb8_8d4ac256",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2455,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2015-11-24T01:43:13Z",
      "side": 1,
      "message": "That is not what I mean. The size of each command is encoded in the opcode. You changed the size of BR_TRANSACTION so that it no longer matches the size encoded in the opcode. If you want to pass more data in BR_TRANSACTION than BR_REPLY, then the opcode could be defined using a struct that contains that new data, but since you are a passing a variable length structure, that does not fit well.",
      "parentUuid": "db271bf3_e4139640",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fbf69f9c_544fbd12",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2455,
      "author": {
        "id": 1026058
      },
      "writtenOn": "2015-11-24T18:05:14Z",
      "side": 1,
      "message": "I see. It didn\u0027t look to me like we actually used that, so I thought this might be ok. As you mentioned, maintaining that set-up is problematic with the variable-length approach.\n\nI don\u0027t like the idea of setting aside max-length structure in addition to the binder_transaction_data, so I guess we would have to add a struct which specifies strlen and a pointer to the string in the mmap\u0027ed binder_proc-\u003ebuffer?",
      "parentUuid": "5b1b2bb8_8d4ac256",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b153384_2b545aa7",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2455,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2015-11-24T22:31:31Z",
      "side": 1,
      "message": "You can look at other drivers for how to define a variable size IOC command (e.g. include/uapi/linux/hiddev.h), but it is probably best to add a separate return type for this.",
      "parentUuid": "fbf69f9c_544fbd12",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b153384_5f886c09",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2455,
      "author": {
        "id": 1026058
      },
      "writtenOn": "2015-11-25T23:06:27Z",
      "side": 1,
      "message": "Thanks for the pointer, the  HIDIO[CG|CS]USAGES ioctls correspond, I think, to my suggestion of using a MAX_LEN.\n\nI may be misunderstanding how we\u0027d use a new return type, but the purpose of this patch would be to introduce an access control hook for binder transactions themselves, and so that information would need to be transferred as part of the BR_TRANSACTION payload and processed before the whole BR_TRANSACTION handling code finished.",
      "parentUuid": "1b153384_2b545aa7",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fbb05f0b_5aa2f46a",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2455,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2015-11-25T23:35:17Z",
      "side": 1,
      "message": "Look at HIDIOCGNAME and HIDIOCGPHYS for examples of variable sized data. It is possible to have a variable sized transaction struct but it may be better to pass extra data with a separate return code so the encoded length is simply the string length or size.",
      "parentUuid": "1b153384_5f886c09",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbc4277e_022e4b81",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2455,
      "author": {
        "id": 1026058
      },
      "writtenOn": "2015-11-26T00:50:38Z",
      "side": 1,
      "message": "I noticed HIDIOCGNAME \u0026 HIDIOCGPHYS as well, but if we were to use those, we would then have to start using the _IOC_[TYPE|NR|SIZE]  macros in userspace to decode these values to get at their constituent parts, whereas now they are simply used as constants.  I guess this is the fundamental issue; if the size field is supposed to matter, then we should be using it in userspace rather than treating these values as arbitrarily generated constants. \n\nUsing a separate, new return value also breaks the current userspace usage pattern because we would be generating a binder protocol return code which has no meaning on its own, or put another way, how should executeCommand() respond when it receives BR_STRING_LEN not immediately after a BR_TRANSACTION?",
      "parentUuid": "fbb05f0b_5aa2f46a",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b153384_df861c83",
        "filename": "drivers/android/binder.c",
        "patchSetId": 2
      },
      "lineNbr": 2455,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2015-11-26T01:14:58Z",
      "side": 1,
      "message": "I think someone from the framework team should look at what they prefer. (you could return the string before BR_TRANSACTION if that makes the decoding simpler)",
      "parentUuid": "bbc4277e_022e4b81",
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b1b2bb8_4fad65aa",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1026058
      },
      "writtenOn": "2015-11-21T01:38:45Z",
      "side": 1,
      "message": "intention is to use this in servicemanager/binder.c and Parcel.cpp instead of the current hard-coding of 3.",
      "range": {
        "startLine": 42,
        "startChar": 1,
        "endLine": 42,
        "endChar": 17
      },
      "revId": "ffc6f05cbacfb845f336add00cd7ca8798fb1b1c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}