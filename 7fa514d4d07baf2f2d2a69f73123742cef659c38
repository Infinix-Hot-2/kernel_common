{
  "comments": [
    {
      "key": {
        "uuid": "6b2473a4_d901f730",
        "filename": "security/selinux/include/initial_sid_to_string.h",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-01-15T15:20:10Z",
      "side": 1,
      "message": "Not sure if there may be compatibility issues here; we haven\u0027t added a new initial SID since circa Linux 2.6.6.   Initial SID support hasn\u0027t yet been converted over to dynamic mapping as we did with classes and permissions. Do you need a new one or could you just use SECINITSID_UNLABELED as the default value?",
      "revId": "7fa514d4d07baf2f2d2a69f73123742cef659c38",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb106340_fac5c94d",
        "filename": "security/selinux/include/objsec.h",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2015-01-15T01:59:38Z",
      "side": 1,
      "message": "one too many tab.",
      "revId": "7fa514d4d07baf2f2d2a69f73123742cef659c38",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b928710_3fc78728",
        "filename": "security/selinux/ioctlcmd.c",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-01-15T19:49:29Z",
      "side": 1,
      "message": "As this code is only called from user context, this can just be spin_lock() and spin_unlock() everywhere IIUC.",
      "revId": "7fa514d4d07baf2f2d2a69f73123742cef659c38",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b928710_7fe66fc2",
        "filename": "security/selinux/ioctlcmd.c",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2015-01-15T19:49:29Z",
      "side": 1,
      "message": "Could avoid need for GFP_ATOMIC by taking the allocation outside the spinlock and then freeing if we happen to find that it is found on the 2nd find.",
      "revId": "7fa514d4d07baf2f2d2a69f73123742cef659c38",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}