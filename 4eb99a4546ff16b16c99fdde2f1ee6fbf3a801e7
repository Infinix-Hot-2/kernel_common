{
  "comments": [
    {
      "key": {
        "uuid": "b4456718_e35d37cc",
        "filename": "fs/ext4/crypto_key.c",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1073853
      },
      "writtenOn": "2017-02-01T21:12:14Z",
      "side": 1,
      "message": "nit: kerneldoc the params as is done for ext4_derive_key_v1().",
      "range": {
        "startLine": 90,
        "startChar": 4,
        "endLine": 90,
        "endChar": 15
      },
      "revId": "4eb99a4546ff16b16c99fdde2f1ee6fbf3a801e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab10d776_c9c30266",
        "filename": "fs/ext4/crypto_key.c",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1137063
      },
      "writtenOn": "2017-02-01T21:57:30Z",
      "side": 1,
      "message": "Will do.",
      "range": {
        "startLine": 90,
        "startChar": 4,
        "endLine": 90,
        "endChar": 15
      },
      "revId": "4eb99a4546ff16b16c99fdde2f1ee6fbf3a801e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "859e2955_4c265497",
        "filename": "fs/ext4/crypto_key.c",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1073853
      },
      "writtenOn": "2017-02-01T21:12:14Z",
      "side": 1,
      "message": "Is everything kosher w.r.t. endianness?",
      "range": {
        "startLine": 95,
        "startChar": 53,
        "endLine": 95,
        "endChar": 69
      },
      "revId": "4eb99a4546ff16b16c99fdde2f1ee6fbf3a801e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b803f79_90a1bfab",
        "filename": "fs/ext4/crypto_key.c",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1137063
      },
      "writtenOn": "2017-02-01T21:57:30Z",
      "side": 1,
      "message": "Yes, it\u0027s the last byte in memory.  Endianness is not relevant here.",
      "range": {
        "startLine": 95,
        "startChar": 53,
        "endLine": 95,
        "endChar": 69
      },
      "revId": "4eb99a4546ff16b16c99fdde2f1ee6fbf3a801e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eadbdde8_3cf5e292",
        "filename": "fs/ext4/crypto_key.c",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1073853
      },
      "writtenOn": "2017-02-01T21:12:14Z",
      "side": 1,
      "message": "Syntactically inconsistent w/ ext4_derive_key_v1().",
      "range": {
        "startLine": 102,
        "startChar": 36,
        "endLine": 102,
        "endChar": 38
      },
      "revId": "4eb99a4546ff16b16c99fdde2f1ee6fbf3a801e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac3e73f7_acb6acaf",
        "filename": "fs/ext4/crypto_key.c",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1137063
      },
      "writtenOn": "2017-02-01T21:57:30Z",
      "side": 1,
      "message": "Yes, I will change it to \u0027char\u0027 to be consistent with the existing code.  (Though note that newer kernels have moved to u8 in fs/crypto/, which in some cases is less error-prone, and is more consistent with the crypto API.)",
      "range": {
        "startLine": 102,
        "startChar": 36,
        "endLine": 102,
        "endChar": 38
      },
      "revId": "4eb99a4546ff16b16c99fdde2f1ee6fbf3a801e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f587f972_4752b690",
        "filename": "fs/ext4/crypto_key.c",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1073853
      },
      "writtenOn": "2017-02-01T21:12:14Z",
      "side": 1,
      "message": "You could collapse this assignment into the declaration.",
      "range": {
        "startLine": 116,
        "startChar": 1,
        "endLine": 116,
        "endChar": 40
      },
      "revId": "4eb99a4546ff16b16c99fdde2f1ee6fbf3a801e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3bd25bf_7d69c5cd",
        "filename": "fs/ext4/crypto_key.c",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1137063
      },
      "writtenOn": "2017-02-01T21:57:30Z",
      "side": 1,
      "message": "Either way works, but I sometimes like to avoid allocating resources in declarations since otherwise it can be easier to miss that they need to be freed.",
      "range": {
        "startLine": 116,
        "startChar": 1,
        "endLine": 116,
        "endChar": 40
      },
      "revId": "4eb99a4546ff16b16c99fdde2f1ee6fbf3a801e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54e85c7b_9a3dc0ae",
        "filename": "fs/ext4/crypto_key.c",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1073853
      },
      "writtenOn": "2017-02-01T21:12:14Z",
      "side": 1,
      "message": "\u003e\n\nIt doesn\u0027t make sense to me to build break if the buffer is bigger than we need it to be.",
      "range": {
        "startLine": 120,
        "startChar": 49,
        "endLine": 120,
        "endChar": 51
      },
      "revId": "4eb99a4546ff16b16c99fdde2f1ee6fbf3a801e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5244b816_568272ed",
        "filename": "fs/ext4/crypto_key.c",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1137063
      },
      "writtenOn": "2017-02-01T21:57:30Z",
      "side": 1,
      "message": "I don\u0027t agree, because we don\u0027t want to accidentally generate fewer bytes of key material than wanted.  (Left-hand side is meant to represent the number of bytes generated, right-hand size is meant to represent the number of bytes wanted.)",
      "range": {
        "startLine": 120,
        "startChar": 49,
        "endLine": 120,
        "endChar": 51
      },
      "revId": "4eb99a4546ff16b16c99fdde2f1ee6fbf3a801e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b353edc_f2a27450",
        "filename": "fs/ext4/crypto_key.c",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1073853
      },
      "writtenOn": "2017-02-01T21:12:14Z",
      "side": 1,
      "message": "We technically only need to memcpy the second noncelen segment.",
      "range": {
        "startLine": 123,
        "startChar": 2,
        "endLine": 124,
        "endChar": 50
      },
      "revId": "4eb99a4546ff16b16c99fdde2f1ee6fbf3a801e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f0123de_6bcb9cc7",
        "filename": "fs/ext4/crypto_key.c",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1137063
      },
      "writtenOn": "2017-02-01T21:57:30Z",
      "side": 1,
      "message": "Yes, we could do the first and third encryptions with \u0027nonce\u0027 as the source.  Either way would work, but I like how doing all encryptions in-place is a little more consistent and makes the equivalency to ecb(aes) a little clearer.",
      "range": {
        "startLine": 123,
        "startChar": 2,
        "endLine": 124,
        "endChar": 50
      },
      "revId": "4eb99a4546ff16b16c99fdde2f1ee6fbf3a801e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57c8e0c9_155a6e90",
        "filename": "fs/ext4/crypto_key.c",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1073853
      },
      "writtenOn": "2017-02-01T21:12:14Z",
      "side": 1,
      "message": "\u003c\u003d",
      "range": {
        "startLine": 153,
        "startChar": 40,
        "endLine": 153,
        "endChar": 42
      },
      "revId": "4eb99a4546ff16b16c99fdde2f1ee6fbf3a801e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "477bfb92_43158270",
        "filename": "fs/ext4/crypto_key.c",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1137063
      },
      "writtenOn": "2017-02-01T21:57:30Z",
      "side": 1,
      "message": "I actually don\u0027t think it makes sense to refer to XTS_KEY_SIZE in the key derivation functions at all, because they do not know that the derived key is going to be used for XTS.  Instead they should only be using MAX_KEY_SIZE.    But since there are already a number of places that use the XTS_KEY_SIZE when they really mean MAX_KEY_SIZE, and I believe things could go wrong if XTS_KEY_SIZE were to be different in either direction, I prefer that for now we assert they are the same.",
      "range": {
        "startLine": 153,
        "startChar": 40,
        "endLine": 153,
        "endChar": 42
      },
      "revId": "4eb99a4546ff16b16c99fdde2f1ee6fbf3a801e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf7043f1_4ec40408",
        "filename": "fs/ext4/crypto_key.c",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1137898
      },
      "writtenOn": "2017-02-03T23:33:00Z",
      "side": 1,
      "message": "+1 XTS_KEY_SIZE -\u003e MAX_KEY_SIZE",
      "parentUuid": "477bfb92_43158270",
      "range": {
        "startLine": 153,
        "startChar": 40,
        "endLine": 153,
        "endChar": 42
      },
      "revId": "4eb99a4546ff16b16c99fdde2f1ee6fbf3a801e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}