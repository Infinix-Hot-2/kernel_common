{
  "comments": [
    {
      "key": {
        "uuid": "35473640_755eda32",
        "filename": "mm/memcontrol.c",
        "patchSetId": 1
      },
      "lineNbr": 6765,
      "author": {
        "id": 1038928
      },
      "writtenOn": "2014-11-07T19:06:38Z",
      "side": 1,
      "message": "why check this on every iteration of this loop? if the current thread has CAP_SYS_NICE, it will always get permission. Can\u0027t we do \n\nif (capable(CAP_SYS_NICE)) {\n  return 0\n}\n\nabove the loop?",
      "range": {
        "startLine": 6765,
        "startChar": 27,
        "endLine": 6765,
        "endChar": 49
      },
      "revId": "d939850f356e2d86a382dff89bef0f14a6a9e131",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "753d2e9e_5da6674e",
        "filename": "mm/memcontrol.c",
        "patchSetId": 1
      },
      "lineNbr": 6765,
      "author": {
        "id": 1015340
      },
      "writtenOn": "2014-11-07T19:11:16Z",
      "side": 1,
      "message": "Is was about to say \"because this is copy-and-pasted from upstream code that does it this way\", but then I did a git blame and Colin wrote it.\n\nSo now I agree with Mark.  Move this into a helper, and while doing so pull out the capable() check like Andres suggested.",
      "parentUuid": "35473640_755eda32",
      "range": {
        "startLine": 6765,
        "startChar": 27,
        "endLine": 6765,
        "endChar": 49
      },
      "revId": "d939850f356e2d86a382dff89bef0f14a6a9e131",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1544f239_2e36c708",
        "filename": "mm/memcontrol.c",
        "patchSetId": 1
      },
      "lineNbr": 6767,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2014-11-07T18:24:14Z",
      "side": 1,
      "message": "I understand that this translates to \u0027allow\u0027 since non-zero response indicates true. I understand that this is a copy and paste from kernel/sched/core.c\n\nThis is counter-intuitive, annoying, duplicating and \"correct\" behavior.\n\nTo make this less painful, could we instead do something like cpu_cgroup_allow_attach() is wrapper for a non-static _cgroup_allow_attach() and call it here rather than pasting it in? I would even accept a direct call to a non-static cpu_cgroup_allow_attach for KISS and low-impact.",
      "range": {
        "startLine": 6767,
        "startChar": 0,
        "endLine": 6767,
        "endChar": 18
      },
      "revId": "d939850f356e2d86a382dff89bef0f14a6a9e131",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35473640_32f8e85a",
        "filename": "mm/memcontrol.c",
        "patchSetId": 1
      },
      "lineNbr": 6767,
      "author": {
        "id": 1015340
      },
      "writtenOn": "2014-11-07T18:40:44Z",
      "side": 1,
      "message": "IMO copy-and-pasting a small amount of code is slightly preferable to modifying core kernel code.  kernel/sched is high-traffic code and modifying it is likely to create conflicts down the line.  (Unless the plan is to send this upstream?)",
      "parentUuid": "1544f239_2e36c708",
      "range": {
        "startLine": 6767,
        "startChar": 0,
        "endLine": 6767,
        "endChar": 18
      },
      "revId": "d939850f356e2d86a382dff89bef0f14a6a9e131",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35473640_7220b038",
        "filename": "mm/memcontrol.c",
        "patchSetId": 1
      },
      "lineNbr": 6767,
      "author": {
        "id": 1018087
      },
      "writtenOn": "2014-11-07T18:43:38Z",
      "side": 1,
      "message": "I don\u0027t think upstream is ready to accept these kinds of patches...",
      "parentUuid": "35473640_32f8e85a",
      "range": {
        "startLine": 6767,
        "startChar": 0,
        "endLine": 6767,
        "endChar": 18
      },
      "revId": "d939850f356e2d86a382dff89bef0f14a6a9e131",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}