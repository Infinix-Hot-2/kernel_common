{
  "comments": [
    {
      "key": {
        "uuid": "2e3f20ea_1fc9be73",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-04-04T02:52:12Z",
      "side": 1,
      "message": "So SE Linux never had a check on syscall finit_module(), just init_module()? how does this fit with cap sys_module? Does this just add additional scrutiny to a path being checked or add something brand new?",
      "revId": "7e479e81c649ad76a79df8bd25b482d47eb043a9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e3f20ea_1f737e24",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2016-04-04T17:10:17Z",
      "side": 1,
      "message": "The LSM hook went in four years ago but remains unused finit_module and init_module use the same hook.\n\ninit_module calls security_kernel_module_from_file(NULL)\nfinit_module calls security_kernel_module_from_file(file)\n\ncap_sys_module grants permission to load kernel modules with no notion of origin. I would say this adds additional scrutiny. The sys_module permission is still be necessary.",
      "parentUuid": "2e3f20ea_1fc9be73",
      "revId": "7e479e81c649ad76a79df8bd25b482d47eb043a9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e3f20ea_152a3fbb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-04-04T17:17:29Z",
      "side": 1,
      "message": "Assuming the loading process has read on the fd being passed during finit_module(), couldn\u0027t the process just read it in and call init_module() and avoid the additional check on the fd? So assuming an attacked service, it doesn\u0027t add anything they cannot already do if they have cap sys_module granted, is that right?\n\nThis would really only scrutinize properly running code, and would at least allow for development auditing of what services are trying to load what and from where.",
      "parentUuid": "2e3f20ea_1f737e24",
      "revId": "7e479e81c649ad76a79df8bd25b482d47eb043a9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e3f20ea_958daff5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2016-04-04T17:29:24Z",
      "side": 1,
      "message": "No, this also checks the init_module path. The following  rule only grants access via the finit_module path:\n\nallow init system_file:system module_load;\n\nIf I want stronger enforcement I can also neverallow access via init_module. Example:\nneverallow domain domain:system module_load;",
      "parentUuid": "2e3f20ea_152a3fbb",
      "revId": "7e479e81c649ad76a79df8bd25b482d47eb043a9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e3f20ea_5fe066e2",
        "filename": "security/selinux/hooks.c",
        "patchSetId": 6
      },
      "lineNbr": 3547,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-04-04T02:52:12Z",
      "side": 1,
      "message": "Scrolling up I see the usage of ! instead of \u003d\u003d NULL",
      "revId": "7e479e81c649ad76a79df8bd25b482d47eb043a9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e3f20ea_3fe59af2",
        "filename": "security/selinux/hooks.c",
        "patchSetId": 6
      },
      "lineNbr": 3548,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-04-04T02:52:12Z",
      "side": 1,
      "message": "I would just return on a tail call, but that\u0027s just me.. I see code above that does both (bail early vs goto out)",
      "revId": "7e479e81c649ad76a79df8bd25b482d47eb043a9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}