{
  "comments": [
    {
      "key": {
        "uuid": "b6a6fdc1_b20b7e66",
        "filename": "init/do_mounts.c",
        "patchSetId": 2
      },
      "lineNbr": 561,
      "author": {
        "id": 1022354
      },
      "writtenOn": "2015-10-27T16:27:02Z",
      "side": 1,
      "message": "This means that the verity_table cannot contain layered dm targets. E.g.\ndm-0\u003ddm-bootcache\ndm-1\u003ddm-verity\n\nIs there a reason not to leave root\u003d alone (e.g., have the cmdline populate it as root\u003d/dev/dm-0) and add a new commandline flag to pass in anything needed?  If not, it would make sense to have the new root be set by dm_run_setup().\n\n\nI\u0027d prefer not as a magic root\u003d value is harder to debug than having a known one and an explicit parameter that sets up what it points at.",
      "range": {
        "startLine": 561,
        "startChar": 9,
        "endLine": 561,
        "endChar": 24
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76fd65bf_cbfd0922",
        "filename": "init/do_mounts.c",
        "patchSetId": 2
      },
      "lineNbr": 561,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-10-28T09:31:47Z",
      "side": 1,
      "message": "I came to know that the policy in Android is to take the best effort to boot the device to UI(Provided that we already have warned the user). With that in mind, I was thinking that the root\u003d can carry the actual device name and if the dm-setup succeeds we would replace the saved_root_name with /dev/dm-0/ as at least in Android the dm-verity device for the root partition is the first dm-device to be set up. I was not aware of the fact that it\u0027s not the case for chrome-os.\n\nsure I can change it to root\u003d/dev/dm-0 and make my verity module take a command line parameter for indicating the actual block device. If dm-setup fails, I can replace the saved root name with block device name.",
      "parentUuid": "b6a6fdc1_b20b7e66",
      "range": {
        "startLine": 561,
        "startChar": 9,
        "endLine": 561,
        "endChar": 24
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6051dc5_173e54f1",
        "filename": "init/do_mounts.c",
        "patchSetId": 2
      },
      "lineNbr": 561,
      "author": {
        "id": 1022354
      },
      "writtenOn": "2015-10-28T14:58:16Z",
      "side": 1,
      "message": "Ah yeah. This is an area where I vehemently philosophically disagree  :)\n\nThat aside(!), I have three main reasons I raise this comment:\n- magic: anytime a value set by the developer is changed behind the scenes based on some policy logic, it can be fragile and hard to debug.  Making each piece explicit can save hours down the line and avoids surprising anyone.\n- development purposes: If I have a system where I can change the kernel commandline, it\u0027s nice to be able to repoint it to the non-verity root even if the dm-verity target is still configured and just unused.  It means I can iterate on testing something related to verity without needing to rehash/sign on each iteration (e.g., error reporting handling in userland).\n- layered dm targets:  On some chrome os devices, we layer two dm targets. When we do that, we setup both dm-0 and dm-1 and we need to tell the kernel to use /dev/dm-1.  Your code could always just use the \"last configured target\", but there are cases where we could setup a dm-crypt target during boot too using a system-backed key that we don\u0027t boot from and in that case, we\u0027d have to know not to make it the last target (for example).\n\nI\u0027m not going to die on this hill :), but this is the background. I *think* only the first one relates to what android needs -- a way to forcibly keep booting even if device mapper fails.  In that case, a strcpy in the setup-fail path might be less surprising.  Alternatively, you could leave root\u003d[underlying-block-device] and add two cmdline params: dm-root\u003d[dm-minor-number] and dm-root-passthrough\u003d1 (or whatever0.  Then if there is no dm-root, it just boots the real root and if there is a large number of dm targets brought up it picks the dm-[minor].  (Or any number of other combos of params and settings - just a strawman :)",
      "parentUuid": "76fd65bf_cbfd0922",
      "range": {
        "startLine": 561,
        "startChar": 9,
        "endLine": 561,
        "endChar": 24
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb1267d6_4f95a1fe",
        "filename": "init/do_mounts.c",
        "patchSetId": 2
      },
      "lineNbr": 561,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-12-03T02:43:27Z",
      "side": 1,
      "message": "I opted for the dm_root and dm_root_passthrough approach.. As you suggested the dm_root will point to the minor number of the dm-setup target and dm_root_passthrough flag will allow mounting the root block device even if the dm-setup fails for root..",
      "parentUuid": "b6051dc5_173e54f1",
      "range": {
        "startLine": 561,
        "startChar": 9,
        "endLine": 561,
        "endChar": 24
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6b795e1_c2b3d321",
        "filename": "init/do_mounts.h",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-10-27T20:01:28Z",
      "side": 1,
      "message": "init __init dm_run_setup(char *rootdev);",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 4
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9bf043de_76d60847",
        "filename": "init/do_mounts.h",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-12-03T02:43:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f6b795e1_c2b3d321",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 4
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36e4cdf6_136b576b",
        "filename": "init/do_mounts.h",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-10-27T20:01:28Z",
      "side": 1,
      "message": "q: a \u0027static\u0027 defined as __init section is probably meaningless, but it does clearly state to the developers that whatever code it produces could disappear later? Just curious.",
      "range": {
        "startLine": 84,
        "startChar": 7,
        "endLine": 84,
        "endChar": 11
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbe987fc_17669cfc",
        "filename": "init/do_mounts.h",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-12-03T02:43:27Z",
      "side": 1,
      "message": "changed to __init",
      "parentUuid": "36e4cdf6_136b576b",
      "range": {
        "startLine": 84,
        "startChar": 7,
        "endLine": 84,
        "endChar": 11
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6f27de4_52879214",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1022354
      },
      "writtenOn": "2015-10-27T16:27:02Z",
      "side": 1,
      "message": "with this here, why replace root\u003d?\n\nAlso, going down this route makes this patch very specialized.  IMO, it\u0027d be better to break it up into a dm\u003d\"\" style patch then add a new table-type for DM for android-style verity.",
      "range": {
        "startLine": 53,
        "startChar": 9,
        "endLine": 53,
        "endChar": 18
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b68efd7e_0f01c586",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-10-28T09:31:47Z",
      "side": 1,
      "message": "I saw one major blocker for adding a custom target.  I have described it in the \"Reply\" section",
      "parentUuid": "b6f27de4_52879214",
      "range": {
        "startLine": 53,
        "startChar": 9,
        "endLine": 53,
        "endChar": 18
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96c81977_bcd369e5",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1022354
      },
      "writtenOn": "2015-10-27T16:27:02Z",
      "side": 1,
      "message": "this looks like similar code to kernel/module_signing.c.  Is there a chance (later) to share code so this doesn\u0027t block the on-flash size of the kernel?",
      "range": {
        "startLine": 70,
        "startChar": 44,
        "endLine": 70,
        "endChar": 61
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b640bdd4_48fed3c8",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-10-28T09:31:47Z",
      "side": 1,
      "message": "I can.. But, I thought that would be the last step, when we are very close to merging this upstream, as It might be hard to merge patches involving module_signing if I refactored the module_sgining code. Until this gets merged upstream, the version here always has the risk of diverging from the one used in module_signing.",
      "parentUuid": "96c81977_bcd369e5",
      "range": {
        "startLine": 70,
        "startChar": 44,
        "endLine": 70,
        "endChar": 61
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96c81977_9cd6add6",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1022354
      },
      "writtenOn": "2015-10-27T16:27:02Z",
      "side": 1,
      "message": "nit: This would give me less of the heebie jeebies if it didn\u0027t rely on type +1 behavior. E.g.,\n   desc \u003d (void *)pks + sizeof(*pks);",
      "range": {
        "startLine": 104,
        "startChar": 30,
        "endLine": 104,
        "endChar": 33
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76fd65bf_c5a4dae1",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-10-27T20:01:28Z",
      "side": 1,
      "message": "void * pointer math is defined as illegal in the C specification. You must use u8 *. There can be debate over all styles of pointer math ... :-(\n\n6.2.5-19: The void type comprises an empty set of values; it is an incomplete type that cannot be completed.\nSince void is an incomplete type, it is not an object type. Therefore it is not a valid operand to an addition operation.",
      "parentUuid": "96c81977_9cd6add6",
      "range": {
        "startLine": 104,
        "startChar": 30,
        "endLine": 104,
        "endChar": 33
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36bdadca_d6c3a2bd",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 1022354
      },
      "writtenOn": "2015-10-27T16:27:02Z",
      "side": 1,
      "message": "does pr_init_info annotate with the calling func or file? If not, it\u0027d be good to note that this is verity_create_dev waiting.",
      "range": {
        "startLine": 176,
        "startChar": 28,
        "endLine": 176,
        "endChar": 34
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9bb8433f_d04dfc17",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-12-03T02:43:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "36bdadca_d6c3a2bd",
      "range": {
        "startLine": 176,
        "startChar": 28,
        "endLine": 176,
        "endChar": 34
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f69cf575_54416221",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 1022354
      },
      "writtenOn": "2015-10-27T16:27:02Z",
      "side": 1,
      "message": "why is this code cargoculted from  do_mounts.c:prepare_namespace()?",
      "range": {
        "startLine": 183,
        "startChar": 2,
        "endLine": 183,
        "endChar": 24
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b18372c_78ea1dca",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-12-03T02:43:27Z",
      "side": 1,
      "message": "I was trying to be safe here as I wasn\u0027t sure whether root dev initialization had dependency on any of the async tasks.. Is this unnecessary ?",
      "parentUuid": "f69cf575_54416221",
      "range": {
        "startLine": 183,
        "startChar": 2,
        "endLine": 183,
        "endChar": 24
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56c22158_d7a9de52",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 189,
      "author": {
        "id": 1022354
      },
      "writtenOn": "2015-10-27T16:27:02Z",
      "side": 1,
      "message": "debugging leftoves?",
      "range": {
        "startLine": 189,
        "startChar": 15,
        "endLine": 189,
        "endChar": 20
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b17f3fd_b72202e6",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 189,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-12-03T02:43:27Z",
      "side": 1,
      "message": "This dmesg is to help debugging the case where root device fails to show up .. I have rephrased it to make it more meaningful.",
      "parentUuid": "56c22158_d7a9de52",
      "range": {
        "startLine": 189,
        "startChar": 15,
        "endLine": 189,
        "endChar": 20
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "968d7947_f4ec10eb",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 1022354
      },
      "writtenOn": "2015-10-27T16:27:02Z",
      "side": 1,
      "message": "Whoa - cool.  Is this safe during early boot? I had assumed you\u0027d  have to just grab the sectors with a bio directly.",
      "range": {
        "startLine": 208,
        "startChar": 0,
        "endLine": 208,
        "endChar": 68
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56fce1c4_8df849e8",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-10-28T09:31:47Z",
      "side": 1,
      "message": "sys_open, sys_read, sys_lseek are used in init/do_mounts_rd.c which is called during init as well. Do you see some problem here ?",
      "parentUuid": "968d7947_f4ec10eb",
      "range": {
        "startLine": 208,
        "startChar": 0,
        "endLine": 208,
        "endChar": 68
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbb18759_1a8321bc",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-12-03T02:43:27Z",
      "side": 1,
      "message": "init/init_task.c:       { INIT_THREAD_INFO(init_task) };\nwhich sets the addr_limit to KERNEL_DS.\nThis is most likely the reason why init code is able make calls to \"sys_*\" functions.\n\ninit/do_mounts_rd.c does make direct calls to sys_open, sys_lseek, sys_read... I can switch to the __bread approach, if sys_lseek/sys_read approach is something that is frowned upon.",
      "parentUuid": "56fce1c4_8df849e8",
      "range": {
        "startLine": 208,
        "startChar": 0,
        "endLine": 208,
        "endChar": 68
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6f27de4_12910a4c",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 325,
      "author": {
        "id": 1022354
      },
      "writtenOn": "2015-10-27T16:27:02Z",
      "side": 1,
      "message": "so if the phone is unlocked, it\u0027ll just passthrough? And the kernel parameters are bootloader specific, right?\n\nIn this scenario there are two trusted parties:\n- signed data on disk\n- kernel command line\nwhere the latter has the priority since the disabled bit on disk isn\u0027t a signed bit.\n\nIs this the intention?  If so, why does the kernel have to do all the signing and not leave it in one trusted place -- the bootloader/handoff?\n\nIf it\u0027s because of legacy secure bootloaders, we still expect good signals on locked status?",
      "range": {
        "startLine": 325,
        "startChar": 5,
        "endLine": 325,
        "endChar": 16
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7642c5df_863850b6",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 325,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-10-28T09:31:47Z",
      "side": 1,
      "message": "The locked status is obtained from androidboot.veritystate. This is something that is mandated in the bootloader requirements and this kernel module is not the primary consumer of that. So we are trusting this signal anyways. http://source.android.com/devices/tech/security/verifiedboot/verified-boot.html has more details.\n\nVerity cannot be disabled on real world user devices.  Real world user devices are always in the locked state. If its unlocked we don\u0027t ensure the integrity of the device. If the magic_number is set to anything other than \"VERITY_METADATA_MAGIC_NUMBER\" in a user build, we know that verity images can no longer be trusted.\n\nThe signed metadata is placed in the same partition as the data blocks, so that we dont have any dependency between creating the verity partition images and the kernel.",
      "parentUuid": "b6f27de4_12910a4c",
      "range": {
        "startLine": 325,
        "startChar": 5,
        "endLine": 325,
        "endChar": 16
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b988aea5_dff25b98",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 429,
      "author": {
        "id": 1058768
      },
      "writtenOn": "2015-10-21T11:37:42Z",
      "side": 1,
      "message": "In fs_mgr_setup_verity, we also mark the underlying device as read-only after dm-verity has been set up. Should we do the same here?",
      "range": {
        "startLine": 429,
        "startChar": 19,
        "endLine": 429,
        "endChar": 33
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "194a9a42_d8a7c528",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 429,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-10-21T22:58:45Z",
      "side": 1,
      "message": "I think we are doing that as well !!\n\nfs_mgr seems to call into fs_mgr_set_blk_ro which makes a BLKROSET ioctl.. drivers/md/md.c seems to service this by calling into set_disk_ro.\n\nIn our kernel module, do_mounts_verity.c directly calls set_disk_ro(line 53). Verity_args.ro argument is hardcoded to 1. So, we always mark this read only as long as we are mounting the blkdevice through dm.\n\nLet me know if this is not suffice or If am missing something",
      "parentUuid": "b988aea5_dff25b98",
      "range": {
        "startLine": 429,
        "startChar": 19,
        "endLine": 429,
        "endChar": 33
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f69cf575_943aeaac",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 457,
      "author": {
        "id": 1022354
      },
      "writtenOn": "2015-10-27T16:27:02Z",
      "side": 1,
      "message": "Is there another way to do this without duplicate device waiting, etc?",
      "range": {
        "startLine": 457,
        "startChar": 0,
        "endLine": 457,
        "endChar": 63
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbb18759_7a906dff",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 457,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-12-03T02:43:27Z",
      "side": 1,
      "message": "In prepare_namespace we wait for the root device(dm-0).. Here we wait for the actual block device. I tried removing the wait and moving the code around such that we wait only for the actual block device.. But, name_to_dev_t seems to return 0:0 if we remove the wait for the device mapper (dm-0) device.",
      "parentUuid": "f69cf575_943aeaac",
      "range": {
        "startLine": 457,
        "startChar": 0,
        "endLine": 457,
        "endChar": 63
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76880537_900e7a77",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 458,
      "author": {
        "id": 1022354
      },
      "writtenOn": "2015-10-27T16:27:02Z",
      "side": 1,
      "message": "It\u0027s not the rootdev though is it? It\u0027s the metadata device, right?",
      "range": {
        "startLine": 458,
        "startChar": 15,
        "endLine": 458,
        "endChar": 21
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f636b56e_67bae648",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 458,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-10-28T09:31:47Z",
      "side": 1,
      "message": "It is the rootdev. In Android, we have all the three verity pieces in the same partition. The data blocks, verity hash tree and the signed metadata which is used to setup the partition are all in the same partition.",
      "parentUuid": "76880537_900e7a77",
      "range": {
        "startLine": 458,
        "startChar": 15,
        "endLine": 458,
        "endChar": 21
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96c81977_7c9b913f",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 468,
      "author": {
        "id": 1022354
      },
      "writtenOn": "2015-10-27T16:27:02Z",
      "side": 1,
      "message": "nit: it\u0027d be nice to pass around the struct being used and not assume global access just from style perspective. (Here and elsewhere)",
      "range": {
        "startLine": 468,
        "startChar": 23,
        "endLine": 468,
        "endChar": 26
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6a6fdc1_92575a3b",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 479,
      "author": {
        "id": 1022354
      },
      "writtenOn": "2015-10-27T16:27:02Z",
      "side": 1,
      "message": "any reason to have an else here and not just:\n    if (verity...)\n      goto err_vrity_table;\n    goto err;\n?",
      "range": {
        "startLine": 479,
        "startChar": 2,
        "endLine": 479,
        "endChar": 6
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b1deb19_fc10e12c",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 479,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-12-03T02:43:27Z",
      "side": 1,
      "message": "fixed !!",
      "parentUuid": "b6a6fdc1_92575a3b",
      "range": {
        "startLine": 479,
        "startChar": 2,
        "endLine": 479,
        "endChar": 6
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36f76de3_63b4020b",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 502,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-10-27T20:01:28Z",
      "side": 1,
      "message": "this string should go into the init section ;-}\n\ncan be defined locally within this block:\n\nwhile (i \u003c VERITY_TABLE_ARGS) {\n    static const char delim[] __initconst \u003d \" \";\n\n    verity_table_args[i] \u003d strsep(\u0026table_ptr, delim);",
      "range": {
        "startLine": 502,
        "startChar": 44,
        "endLine": 502,
        "endChar": 47
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1bac5306_72d6d074",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 502,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-12-03T02:43:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "36f76de3_63b4020b",
      "range": {
        "startLine": 502,
        "startChar": 44,
        "endLine": 502,
        "endChar": 47
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56c22158_576f8eba",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 526,
      "author": {
        "id": 1022354
      },
      "writtenOn": "2015-10-27T16:27:02Z",
      "side": 1,
      "message": "would be good to check that this doesn\u0027t wrap (though the result will be checked by dm)",
      "range": {
        "startLine": 526,
        "startChar": 16,
        "endLine": 526,
        "endChar": 28
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76880537_b00b7666",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 547,
      "author": {
        "id": 1022354
      },
      "writtenOn": "2015-10-27T16:27:02Z",
      "side": 1,
      "message": "out of curiosity, why is vmalloc() being used everywhere here?",
      "range": {
        "startLine": 547,
        "startChar": 16,
        "endLine": 547,
        "endChar": 23
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6ae1193_989b0a3f",
        "filename": "init/do_mounts_android_verity.c",
        "patchSetId": 2
      },
      "lineNbr": 547,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-10-27T20:01:28Z",
      "side": 1,
      "message": "Does not draw from the precious physically contiguous pool of pages from the slab allocator or dma resources. The main advantages of using vmalloc show up when accessing more than a page size though ...\n\nAlso, vmalloc does not incite a kernel panic when starved for memory (but typically you have a fallback plan, like using a smaller buffer, or less functionality).",
      "parentUuid": "76880537_b00b7666",
      "range": {
        "startLine": 547,
        "startChar": 16,
        "endLine": 547,
        "endChar": 23
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76880537_f0ec1eeb",
        "filename": "init/do_mounts_android_verity.h",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1022354
      },
      "writtenOn": "2015-10-27T16:27:02Z",
      "side": 1,
      "message": "boilerplate?",
      "range": {
        "startLine": 1,
        "startChar": 8,
        "endLine": 1,
        "endChar": 20
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fba69f26_6b3a61a4",
        "filename": "init/do_mounts_android_verity.h",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-12-03T02:43:27Z",
      "side": 1,
      "message": "Was using this in one of the previous patch set.. Have removed this and other unused ones as well..",
      "parentUuid": "76880537_f0ec1eeb",
      "range": {
        "startLine": 1,
        "startChar": 8,
        "endLine": 1,
        "endChar": 20
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "964739ec_9e9f3d5c",
        "filename": "init/do_mounts_android_verity.h",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-10-27T20:32:32Z",
      "side": 1,
      "message": ";-}\n\n/* Yes, this is freed before exiting init */",
      "range": {
        "startLine": 55,
        "startChar": 7,
        "endLine": 55,
        "endChar": 19
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9bb8433f_d034dc8b",
        "filename": "init/do_mounts_android_verity.h",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-12-03T02:43:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "964739ec_9e9f3d5c",
      "range": {
        "startLine": 55,
        "startChar": 7,
        "endLine": 55,
        "endChar": 19
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56e941ce_066ddbed",
        "filename": "init/do_mounts_android_verity.h",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-10-27T20:01:28Z",
      "side": 1,
      "message": "Beware of holes in structures? __packed to be sure?\n\nmetadata_start \u0027starts\u0027 on a u32 boundary as it stands, can the structure be refactored so that metadata_start and verity_table pointer are guaranteed on a 64-bit boundary?",
      "range": {
        "startLine": 56,
        "startChar": 28,
        "endLine": 56,
        "endChar": 29
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b0923b2_2e815369",
        "filename": "init/do_mounts_android_verity.h",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-12-03T02:43:27Z",
      "side": 1,
      "message": "done.. I have realigned the structure..",
      "parentUuid": "56e941ce_066ddbed",
      "range": {
        "startLine": 56,
        "startChar": 28,
        "endLine": 56,
        "endChar": 29
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6d8bd3b_ded9f455",
        "filename": "init/do_mounts_android_verity.h",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-10-27T20:01:28Z",
      "side": 1,
      "message": "starts on a 32-bit boundary.",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 78,
        "endChar": 14
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b18372c_b5f3200d",
        "filename": "init/do_mounts_android_verity.h",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-12-03T02:43:27Z",
      "side": 1,
      "message": "I have marked this as TODO.. I am currently working on the userspace change to fix this..",
      "parentUuid": "b6d8bd3b_ded9f455",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 78,
        "endChar": 14
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "169a6978_d5d0eeda",
        "filename": "init/do_mounts_verity.h",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1022354
      },
      "writtenOn": "2015-10-27T16:27:02Z",
      "side": 1,
      "message": "boilerplate",
      "range": {
        "startLine": 1,
        "startChar": 19,
        "endLine": 1,
        "endChar": 31
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dbae3bf9_a1c588b3",
        "filename": "init/do_mounts_verity.h",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-12-03T02:43:27Z",
      "side": 1,
      "message": "Sorry.. Not sure what are you intending.",
      "parentUuid": "169a6978_d5d0eeda",
      "range": {
        "startLine": 1,
        "startChar": 19,
        "endLine": 1,
        "endChar": 31
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f69cf575_b437eec5",
        "filename": "init/do_mounts_verity.h",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1022354
      },
      "writtenOn": "2015-10-27T16:27:02Z",
      "side": 1,
      "message": "is this standard anywhere else?",
      "range": {
        "startLine": 7,
        "startChar": 8,
        "endLine": 7,
        "endChar": 20
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f636b56e_87b7ea5d",
        "filename": "init/do_mounts_verity.h",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-10-28T09:31:47Z",
      "side": 1,
      "message": "This is inspired from the discussion that is happening upstream.\nhttp://www.serverphorums.com/read.php?12,963491\nThe patches mentioned in the email thread have not been merged yet. Using them directly made me hit compilation issues.",
      "parentUuid": "f69cf575_b437eec5",
      "range": {
        "startLine": 7,
        "startChar": 8,
        "endLine": 7,
        "endChar": 20
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "964739ec_3ed4e91a",
        "filename": "init/do_mounts_verity.h",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-10-27T20:32:32Z",
      "side": 1,
      "message": "__init",
      "range": {
        "startLine": 24,
        "startChar": 17,
        "endLine": 24,
        "endChar": 24
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9bb8433f_856970ce",
        "filename": "init/do_mounts_verity.h",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-12-03T02:43:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "964739ec_3ed4e91a",
      "range": {
        "startLine": 24,
        "startChar": 17,
        "endLine": 24,
        "endChar": 24
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f636b56e_61417670",
        "filename": "init/do_mounts_verity.h",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-10-27T20:32:32Z",
      "side": 1,
      "message": "__init (?)",
      "range": {
        "startLine": 26,
        "startChar": 30,
        "endLine": 26,
        "endChar": 31
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ba24b12_187cca98",
        "filename": "init/do_mounts_verity.h",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-12-03T02:43:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f636b56e_61417670",
      "range": {
        "startLine": 26,
        "startChar": 30,
        "endLine": 26,
        "endChar": 31
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16342965_e2102669",
        "filename": "init/do_mounts_verity.h",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-10-27T20:32:32Z",
      "side": 1,
      "message": "missing closing )",
      "range": {
        "startLine": 27,
        "startChar": 9,
        "endLine": 27,
        "endChar": 27
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbb18759_46131076",
        "filename": "init/do_mounts_verity.h",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-12-03T02:43:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16342965_e2102669",
      "range": {
        "startLine": 27,
        "startChar": 9,
        "endLine": 27,
        "endChar": 27
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96c81977_bc9c4936",
        "filename": "init/do_mounts_verity.h",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1022354
      },
      "writtenOn": "2015-10-27T16:27:02Z",
      "side": 1,
      "message": "If you only ever setup one target, you don\u0027t need a lot of the work here.  Of course, if you only setup one target, then this patch set will definitely not be compatible with usage in chrome os :/",
      "range": {
        "startLine": 45,
        "startChar": 5,
        "endLine": 45,
        "endChar": 17
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "964739ec_6425febf",
        "filename": "init/do_mounts_verity.h",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1042384
      },
      "writtenOn": "2015-10-28T09:31:47Z",
      "side": 1,
      "message": "Happy to help to find a middle ground between chrome-os and Android.",
      "parentUuid": "96c81977_bc9c4936",
      "range": {
        "startLine": 45,
        "startChar": 5,
        "endLine": 45,
        "endChar": 17
      },
      "revId": "87b9f8c299a9198ee2ccccffc9a610d7bb7cd248",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}