{
  "comments": [
    {
      "key": {
        "uuid": "f08d07b7_3746f578",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 316,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-24T03:01:10Z",
      "side": 1,
      "message": "do you need this outside the allocator code? If not it would be better to make it generic as we have other uses for extra allocations.",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2554bf0d_a63726e6",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 316,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-26T14:48:11Z",
      "side": 1,
      "message": "I don\u0027t think so. I can make it generic a generic \u0027extra allocations buffer\u0027 - but that probably means just renaming this to something like \u0027extra_buffers_size\u0027. Is that what you had in mind?",
      "parentUuid": "f08d07b7_3746f578",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452373ec_8aad8ba0",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 316,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-26T21:53:04Z",
      "side": 1,
      "message": "Something like that yes. I think we need to also allocate space for the security context string here, but I don\u0027t know if we need both at the same time.",
      "parentUuid": "2554bf0d_a63726e6",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452ff370_072bb6ec",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 316,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-28T14:47:30Z",
      "side": 1,
      "message": "Ok; so do you know how they will represent the security context in meta-data? Is there an open change for this? For now I will have just renamed this to something more generic.",
      "parentUuid": "452373ec_8aad8ba0",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45ba9338_bd500260",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 316,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-28T21:21:36Z",
      "side": 1,
      "message": "There is a (broken) change here:\nhttps://android-review.googlesource.com/183566\n\nAdding a transaction return type with a pointer to the string seems like a reasonable way to fix it.",
      "parentUuid": "452ff370_072bb6ec",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452ff370_c75a7e27",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 316,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-29T12:26:41Z",
      "side": 1,
      "message": "Ok. That anyway needs to be a separate change, I think. Anything else we should do on this one to accomodate that?",
      "parentUuid": "45ba9338_bd500260",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c22d9995_ce3da318",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 316,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-29T20:12:26Z",
      "side": 1,
      "message": "I think the allocator change should go into a separate patch from the new commands. If the security context needs to be used at the same time as your new objects (ask dcashman or nnk), there may be additional changes needed.",
      "parentUuid": "452ff370_c75a7e27",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f08d07b7_77407d5a",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 759,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-24T03:01:10Z",
      "side": 1,
      "message": "see above, can this be more generic?",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f08d07b7_d74f9184",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 780,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-24T03:01:10Z",
      "side": 1,
      "message": "is this still valid?",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2554bf0d_06771a93",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 780,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-26T14:48:11Z",
      "side": 1,
      "message": "I need to think about this.",
      "parentUuid": "f08d07b7_d74f9184",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452ff370_0759f690",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 780,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-28T14:47:30Z",
      "side": 1,
      "message": "Yeah this was wrong, fixed it.",
      "parentUuid": "2554bf0d_06771a93",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f08d07b7_d7015114",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 1954,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-24T03:01:10Z",
      "side": 1,
      "message": "You are duplicating a lot of code here. You can look at Change-Id: I40a8753520bad5e92dfe273cdf6e8feb5b074b76 to see if any of those pending changes are helpful, but if not adding some helper functions to handle common code would be better.",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2554bf0d_86342ae2",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 1954,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-26T14:48:11Z",
      "side": 1,
      "message": "I\u0027ll take a look.",
      "parentUuid": "f08d07b7_d7015114",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452ff370_4763ee38",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 1954,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-28T14:47:30Z",
      "side": 1,
      "message": "will address in next PS (trying to pull in change from Riley as a parent). I will also make sure checkpatch passes then - right now I didn\u0027t bother because the cleanup will remove a lot of violations anyway.",
      "parentUuid": "2554bf0d_86342ae2",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f08d07b7_37099537",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 1977,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-24T03:01:10Z",
      "side": 1,
      "message": "what is this for?",
      "range": {
        "startLine": 1977,
        "startChar": 8,
        "endLine": 1977,
        "endChar": 44
      },
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2554bf0d_265b362d",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 1977,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-26T14:48:11Z",
      "side": 1,
      "message": "I was worried about a malicious actor causing overflow in line 1978 below, erroneously passing the check.",
      "parentUuid": "f08d07b7_37099537",
      "range": {
        "startLine": 1977,
        "startChar": 8,
        "endLine": 1977,
        "endChar": 44
      },
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452373ec_6dcb114a",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 1977,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-26T21:53:04Z",
      "side": 1,
      "message": "I think it is better to check for overflow than add an arbitrary limit.",
      "parentUuid": "2554bf0d_265b362d",
      "range": {
        "startLine": 1977,
        "startChar": 8,
        "endLine": 1977,
        "endChar": 44
      },
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452ff370_87e16690",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 1977,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-28T14:47:30Z",
      "side": 1,
      "message": "Done, though I don\u0027t like having to do division. Thinking whether there\u0027s better ways.",
      "parentUuid": "452373ec_6dcb114a",
      "range": {
        "startLine": 1977,
        "startChar": 8,
        "endLine": 1977,
        "endChar": 44
      },
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45ba9338_bd7c8278",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 1977,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-28T21:21:36Z",
      "side": 1,
      "message": "Dividing by a constant power of two should optimize to a shift, but you could also do a divide at compile time as suggested by sbauer.",
      "parentUuid": "452ff370_87e16690",
      "range": {
        "startLine": 1977,
        "startChar": 8,
        "endLine": 1977,
        "endChar": 44
      },
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452ff370_07457641",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 1977,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-29T12:26:41Z",
      "side": 1,
      "message": "Yeah I\u0027ll follow Scotts\u0027 suggestion; I thought SIZE_T_MAX is C99 (and we can\u0027t use it), but looks like linux/kernel.h does have SIZE_MAX.",
      "parentUuid": "45ba9338_bd7c8278",
      "range": {
        "startLine": 1977,
        "startChar": 8,
        "endLine": 1977,
        "endChar": 44
      },
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f08d07b7_9741893f",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 1981,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-24T03:01:10Z",
      "side": 1,
      "message": "You may want to look at https://android-review.googlesource.com/260878 to see which error codes would make most sense for all the error cases you add.",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2554bf0d_66512e0b",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 1981,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-26T14:48:11Z",
      "side": 1,
      "message": "ok.",
      "parentUuid": "f08d07b7_9741893f",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452ff370_874b26b3",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 1981,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-28T14:47:30Z",
      "side": 1,
      "message": "Will address in next PS",
      "parentUuid": "2554bf0d_66512e0b",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f08d07b7_77131d65",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 1987,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-24T03:01:10Z",
      "side": 1,
      "message": "this message does not seem accurate",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2554bf0d_46563205",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 1987,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-26T14:48:11Z",
      "side": 1,
      "message": "ack, will fix.",
      "parentUuid": "f08d07b7_77131d65",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452ff370_c7451e9d",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 1987,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-28T14:47:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2554bf0d_46563205",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452373ec_ed86e1c3",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 1992,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-26T21:53:04Z",
      "side": 1,
      "message": "don\u0027t use int to access data shared with user-space. User-space int could be a different size.",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452ff370_a702ea6b",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 1992,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-28T14:47:30Z",
      "side": 1,
      "message": "err, yeah I guess that could happen (though there\u0027s no arch linux supports today where this is true, right?). I changed it to u32; that would mean the userspace buffer would also need to explicitly use 32-bit fields. It looks like the current Parcel code doesn\u0027t validate this (even for the existing file descriptor code).",
      "parentUuid": "452373ec_ed86e1c3",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45ba9338_1d0dce44",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 1992,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-28T21:21:36Z",
      "side": 1,
      "message": "No, I\u0027m not aware of any existing supported arch where int is not the same size, but it is better to use a types with explicit sizes in user-space interfaces, as some types are different.",
      "parentUuid": "452ff370_a702ea6b",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f08d07b7_d72231b3",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 2022,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-24T03:01:10Z",
      "side": 1,
      "message": "this could use two helper function, one shared function to transfer a file, and one to transfer an array with would allow simpler cleanup.",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2554bf0d_06603acd",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 2022,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-26T14:48:11Z",
      "side": 1,
      "message": "ok.",
      "parentUuid": "f08d07b7_d72231b3",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452ff370_e74a22ac",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 2022,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-28T14:47:30Z",
      "side": 1,
      "message": "will address in next PS.",
      "parentUuid": "2554bf0d_06603acd",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f08d07b7_f751ed00",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 2045,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-24T03:01:10Z",
      "side": 1,
      "message": "this will not work in upstream kernel. I think you need to split this patch in two, one that does not depend on the preempt disable patch, and one that fixes your change up to work with that patch.",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2554bf0d_a64e0664",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 2045,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-26T14:48:11Z",
      "side": 1,
      "message": "Ok. BTW do you know if we\u0027re going to try to upstream the preempt disable patch?",
      "parentUuid": "f08d07b7_f751ed00",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452373ec_edd541db",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 2045,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-26T21:53:04Z",
      "side": 1,
      "message": "It has already been rejected.",
      "parentUuid": "2554bf0d_a64e0664",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452ff370_07401689",
        "filename": "drivers/android/binder.c",
        "patchSetId": 3
      },
      "lineNbr": 2045,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-28T14:47:30Z",
      "side": 1,
      "message": "Ok, remove preempt_disabled for now.",
      "parentUuid": "452373ec_edd541db",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f08d07b7_b7f68554",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 100,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-24T03:01:10Z",
      "side": 1,
      "message": "consider using kerneldoc comments instead",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2554bf0d_864b0a54",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 100,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-26T14:48:11Z",
      "side": 1,
      "message": "ok.",
      "parentUuid": "f08d07b7_b7f68554",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452ff370_273d1a18",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 100,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-28T14:47:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2554bf0d_864b0a54",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452373ec_4d128d66",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 124,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-26T21:53:04Z",
      "side": 1,
      "message": "Is this useful? Is it easier validate this parent index than finding the parent without it?",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452ff370_67d392f6",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 124,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-28T14:47:30Z",
      "side": 1,
      "message": "You mean by specifying the address the fd array directly? I guess you could do that, but it would mean walking all the previous objects every time we find an fd array object. In our case the auto-generated code already knows the parent relationship, so we can save the time doing that.",
      "parentUuid": "452373ec_4d128d66",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45ba9338_e41dd628",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 124,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-28T21:21:36Z",
      "side": 1,
      "message": "No I mean only allow the parent to be the last PTR object seen.",
      "parentUuid": "452ff370_67d392f6",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452ff370_474f6e61",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 124,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-29T12:26:41Z",
      "side": 1,
      "message": "I\u0027m not sure that\u0027s always true, we don\u0027t support this today , but in the future maybe we could have:\n\nstruct some_struct {\n   struct other_struct *other;\n   int                 num_fds;\n   int                 fds[0];\n};\n\nand we basically do a DFS when writing this into a Parcel; the first PTR object represents \u0027some_struct\u0027, the second PTR object represents \u0027some_struct-\u003eother\u0027, but the FD array needs to have the first PTR object as a parent.",
      "parentUuid": "45ba9338_e41dd628",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c22d9995_2efe67c7",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 124,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-29T20:12:26Z",
      "side": 1,
      "message": "It seems you have to apply fixups out of order in that case, which is hard to validate. You may have to change this to fix up all the offsets in one object before moving on to the next one.",
      "parentUuid": "452ff370_474f6e61",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452373ec_ed538134",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 125,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-26T21:53:04Z",
      "side": 1,
      "message": "what does pointer refer to? It seems to be the offset where the actual array starts. Are you validating that this offset has not already been fixed up?",
      "range": {
        "startLine": 125,
        "startChar": 44,
        "endLine": 125,
        "endChar": 51
      },
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452ff370_a71bcae3",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 125,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-28T14:47:30Z",
      "side": 1,
      "message": "Yes, it is the offset in the buffer where the array starts.\n\nDo you mean whether the file descriptors have already been fixed up? It shouldn\u0027t happen, unless userspace messes up. Do you see issues with this?\n\nWe know the buffer itself has already been fixed up, since its offset must be lower than the offset of this object, and we\u0027re walking the offset array in order.",
      "parentUuid": "452373ec_ed538134",
      "range": {
        "startLine": 125,
        "startChar": 44,
        "endLine": 125,
        "endChar": 51
      },
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45ba9338_64e726fe",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 125,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-28T21:21:36Z",
      "side": 1,
      "message": "You can\u0027t trust user-space with data that affects the kernel and other user-space processes. Allowing multiple fixups on the same address can create security holes.",
      "parentUuid": "452ff370_a71bcae3",
      "range": {
        "startLine": 125,
        "startChar": 44,
        "endLine": 125,
        "endChar": 51
      },
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452ff370_674c726c",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 125,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-29T12:26:41Z",
      "side": 1,
      "message": "Agree; but the receiving side will anyway have to validate all meta-data objects are the way it expects them to be in userspace; eg check that the kernel has in fact fixed up a pointer/fd at a certain offset before using it. Likewise, verify that the # of meta-data objects match. So it would detect areas being fixed up twice, or not fixed up at all.\n\nAs for the kernel itself, if a malicious process points at some random memory or tries to fix up a file descriptor region twice, fget() would presumably fail or get a random file descriptor if the memory happened to be pointing at a valid one; but it doesn\u0027t seem like that would be bad for the receiving process.",
      "parentUuid": "45ba9338_64e726fe",
      "range": {
        "startLine": 125,
        "startChar": 44,
        "endLine": 125,
        "endChar": 51
      },
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c22d9995_0edccb67",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 125,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-29T20:12:26Z",
      "side": 1,
      "message": "I don\u0027t think you can get away with not validating this in the kernel. It is very similar to the existing fixup that the driver does for flat binder objects where it validates that they don\u0027t overlap. User-space cannot easily validate this without re-scanning the entire offset array and replicating the validation that the kernel should have performed.",
      "parentUuid": "452ff370_674c726c",
      "range": {
        "startLine": 125,
        "startChar": 44,
        "endLine": 125,
        "endChar": 51
      },
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f08d07b7_97ab4928",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-24T03:01:10Z",
      "side": 1,
      "message": "Why is this separate from the binder_buffer_object object? Can you have more than one of these per binder_buffer_object?",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2554bf0d_267216a3",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-26T14:48:11Z",
      "side": 1,
      "message": "They are different things - a binder_buffer_object is a buffer to copy with optionally a parent pointer to fix up. A binder_fd_array_object describes a list of file descriptors to fix up in a parent buffer.\n\nThere could be multiple FD arrays present in a single binder_buffer_object.",
      "parentUuid": "f08d07b7_97ab4928",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452373ec_6d4671aa",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-26T21:53:04Z",
      "side": 1,
      "message": "Can you update the comment to clarify this. How often do you pass arrays of fds versus a single fd?",
      "parentUuid": "2554bf0d_267216a3",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452ff370_47d68ee7",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-28T14:47:30Z",
      "side": 1,
      "message": "Will update it. The main usecase for this is a struct containing a native_handle_t (used by forex gralloc):\n\nstruct some_struct {\n    native_handle_t* handle;\n    ...\n}\n\na native_handle contains a list of file descriptors. We copy the struct and the native_handle_t as regular binder_buffer_objects. But the file descriptors in the native_handle_t need to be fixed up; since the target buffer is in read-only memory, we can\u0027t change some_struct.handle or the file descriptors it contains in userspace in the receiving process - the kernel needs to do it. This is what binder_fd_array allows you to do.\n\nDoes that make sense?",
      "parentUuid": "452373ec_6d4671aa",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45ba9338_c791b44f",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-28T21:21:36Z",
      "side": 1,
      "message": "What is unclear is why you need multiple fd arrays per ptr-object. A single array of all the fds in the ptr-object or a fd-object per fd seems simpler.",
      "parentUuid": "452ff370_47d68ee7",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452ff370_a77caa78",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-29T12:26:41Z",
      "side": 1,
      "message": "mmm, I think in our current design we don\u0027t strictly have a need for multiple, since we only use this for native_handle_t; in that case the native_handle_t struct itself is the PTR object, and it would only have one fd array embedded.\n\nSo I guess you\u0027re saying, if this is true, then I could add something like\n\nbinder_size_t  fd_array_offset;\n\nto binder_buffer_object, and have a flag indicating it has an FD array to fix up?\n\nThe only downside I can see is that it increases the meta-data object size with 8 bytes for all buffers, whether they contain FD arrays or not. But perhaps that\u0027s not such a big deal.",
      "parentUuid": "45ba9338_c791b44f",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c22d9995_cefec393",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-29T20:12:26Z",
      "side": 1,
      "message": "If your normal case is that your objects contain a single array of file descriptors, and most object don\u0027t contain any file descriptors then this design seems optimal. I though passing single file descriptors was more common though. I think your comment should explain why you expect arrays of file descriptors.",
      "parentUuid": "452ff370_a77caa78",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f08d07b7_f7a2cd49",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 205,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-24T03:01:10Z",
      "side": 1,
      "message": "don\u0027t touch unrelated code",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2554bf0d_66780e85",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 205,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-26T14:48:11Z",
      "side": 1,
      "message": "will fix.",
      "parentUuid": "f08d07b7_f7a2cd49",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452ff370_473a0e21",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 205,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-28T14:47:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2554bf0d_66780e85",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f08d07b7_77679d1e",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 411,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2016-09-24T03:01:10Z",
      "side": 1,
      "message": "update comment to match your version",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2554bf0d_467d1273",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 411,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-26T14:48:11Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "f08d07b7_77679d1e",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452ff370_c720be0a",
        "filename": "include/uapi/linux/android/binder.h",
        "patchSetId": 3
      },
      "lineNbr": 411,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2016-09-28T14:47:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2554bf0d_467d1273",
      "revId": "df35540a3034c631d7fd8b8bcd4a58b35d13ddc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}